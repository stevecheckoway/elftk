#![allow(dead_code)]

use super::Elf_Word;

// i386
pub const R_386_NONE:          Elf_Word = 0;  // none   none
pub const R_386_32:            Elf_Word = 1;  // word32 S + A
pub const R_386_PC32:          Elf_Word = 2;  // word32 S + A - P
pub const R_386_GOT32:         Elf_Word = 3;  // word32 G + A - GOT
pub const R_386_PLT32:         Elf_Word = 4;  // word32 L + A - P
pub const R_386_COPY:          Elf_Word = 5;  // none   none
pub const R_386_GLOB_DAT:      Elf_Word = 6;  // word32 S
pub const R_386_JUMP_SLOT:     Elf_Word = 7;  // word32 S
pub const R_386_RELATIVE:      Elf_Word = 8;  // word32 B + A
pub const R_386_GOTOFF:        Elf_Word = 9;  // word32 S + A - GOT
pub const R_386_GOTPC:         Elf_Word = 10; // word32 GOT + A - P
pub const R_386_TLS_TPOFF:     Elf_Word = 14; // word32
pub const R_386_TLS_IE:        Elf_Word = 15; // word32
pub const R_386_TLS_GOTIE:     Elf_Word = 16; // word32
pub const R_386_TLS_LE:        Elf_Word = 17; // word32
pub const R_386_TLS_GD:        Elf_Word = 18; // word32
pub const R_386_TLS_LDM:       Elf_Word = 19; // word32
pub const R_386_16:            Elf_Word = 20; // word16 S + A
pub const R_386_PC16:          Elf_Word = 21; // word16 S + A - P
pub const R_386_8:             Elf_Word = 22; // word8  S + A
pub const R_386_PC8:           Elf_Word = 23; // word8  S + A - P
pub const R_386_TLS_GD_32:     Elf_Word = 24; // word32
pub const R_386_TLS_GD_PUSH:   Elf_Word = 25; // word32
pub const R_386_TLS_GD_CALL:   Elf_Word = 26; // word32
pub const R_386_TLS_GD_POP:    Elf_Word = 27; // word32
pub const R_386_TLS_LDM_32:    Elf_Word = 28; // word32
pub const R_386_TLS_LDM_PUSH:  Elf_Word = 29; // word32
pub const R_386_TLS_LDM_CALL:  Elf_Word = 30; // word32
pub const R_386_TLS_LDM_POP:   Elf_Word = 31; // word32
pub const R_386_TLS_LDO_32:    Elf_Word = 32; // word32
pub const R_386_TLS_IE_32:     Elf_Word = 33; // word32
pub const R_386_TLS_LE_32:     Elf_Word = 34; // word32
pub const R_386_TLS_DTPMOD32:  Elf_Word = 35; // word32
pub const R_386_TLS_DTPOFF32:  Elf_Word = 36; // word32
pub const R_386_TLS_TPOFF32:   Elf_Word = 37; // word32
pub const R_386_SIZE32:        Elf_Word = 38; // word32 Z + A
pub const R_386_TLS_GOTDESC:   Elf_Word = 39; // word32
pub const R_386_TLS_DESC_CALL: Elf_Word = 40; // none   none
pub const R_386_TLS_DESC:      Elf_Word = 41; // word32
pub const R_386_IRELATIVE:     Elf_Word = 42; // word32 indirect (B + A)

// x86-64
pub const R_X86_64_NONE:             Elf_Word = 0;  // none none
pub const R_X86_64_64:               Elf_Word = 1;  // word64 S + A
pub const R_X86_64_PC32:             Elf_Word = 2;  // word32 S + A - P
pub const R_X86_64_GOT32:            Elf_Word = 3;  // word32 G + A
pub const R_X86_64_PLT32:            Elf_Word = 4;  // word32 L + A - P
pub const R_X86_64_COPY:             Elf_Word = 5;  // none none
pub const R_X86_64_GLOB_DAT:         Elf_Word = 6;  // word64 S
pub const R_X86_64_JUMP_SLOT:        Elf_Word = 7;  // word64 S
pub const R_X86_64_RELATIVE:         Elf_Word = 8;  // word64 B + A
pub const R_X86_64_GOTPCREL:         Elf_Word = 9;  // word32 G + GOT + A - P
pub const R_X86_64_32:               Elf_Word = 10; // word32 S + A
pub const R_X86_64_32S:              Elf_Word = 11; // word32 S + A
pub const R_X86_64_16:               Elf_Word = 12; // word16 S + A
pub const R_X86_64_PC16:             Elf_Word = 13; // word16 S + A - P
pub const R_X86_64_8:                Elf_Word = 14; // word8 S + A
pub const R_X86_64_PC8:              Elf_Word = 15; // word8 S + A - P
pub const R_X86_64_DTPMOD64:         Elf_Word = 16; // word64
pub const R_X86_64_DTPOFF64:         Elf_Word = 17; // word64
pub const R_X86_64_TPOFF64:          Elf_Word = 18; // word64
pub const R_X86_64_TLSGD:            Elf_Word = 19; // word32
pub const R_X86_64_TLSLD:            Elf_Word = 20; // word32
pub const R_X86_64_DTPOFF32:         Elf_Word = 21; // word32
pub const R_X86_64_GOTTPOFF:         Elf_Word = 22; // word32
pub const R_X86_64_TPOFF32:          Elf_Word = 23; // word32
pub const R_X86_64_PC64:             Elf_Word = 24; // word64 S + A - P
pub const R_X86_64_GOTOFF64:         Elf_Word = 25; // word64 S + A - GOT
pub const R_X86_64_GOTPC32:          Elf_Word = 26; // word32 GOT + A - P
pub const R_X86_64_SIZE32:           Elf_Word = 32; // word32 Z + A
pub const R_X86_64_SIZE64:           Elf_Word = 33; // word64 Z + A
pub const R_X86_64_GOTPC32_TLSDESC:  Elf_Word = 34; // word32
pub const R_X86_64_TLSDESC_CALL:     Elf_Word = 35; // none
pub const R_X86_64_TLSDESC:          Elf_Word = 36; // word64Ã—2
pub const R_X86_64_IRELATIVE:        Elf_Word = 37; // word64 indirect (B + A)
